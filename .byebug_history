c
history_params[:omit].present? && aa.include?(history_params[:omit])
history_params[:starts_with].present? && aa.start_with?(history_params[:starts_with])
history_params[:starts_with].present?
aa
aa = x.to_s + y.to_s
domain.nil?
domain
c
domain
c
domain
c
domain
c
domain
c
domain
continue
results
continue
results
continue
results
continue
results
continue
results
continue
results
ab
domains
continue
aa.last.equal?("asdfds")
aa.last.equal? "asdfds"
aa[1]
aa.last.equal? aa[1]
aa.last.equal? "asdfds"
aa
aa.join(', ')
aa.last.equal? "asdfds"
aa.last
aa.last.equal? "asdfds"
aa.last.equal? 'asdfds'
aa.last.equal? 'aa'
aa.last.equal? ''
aa.last.equal?
aa.last
aa
a
consonants.map {|x| vowels.map {|y| x.to_s + y.to_s } }.flatten
consonants.map {|x| vowels.map {|y| x.to_s + y.to_s } }
    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']
    vowels = ['a', 'e', 'i', 'o', 'u']
"asdfds".split('')
"asdfds".split()
"asdfds".split
aa << "asdfds"
aa << "321321"
aa= []
c
results.map {|x| ab.map {|y| x.to_s + y.to_s } }.flatten
ab
results
continue
@results
continue
pattern
pattern.to_s.strip.empty?
results
continue
results
continue
adsf
}continue
  print c, ' '
  end
    break
  if c == 'l'
"hello".each_char {|c|
"hello".each_char {|c| if c == 'l' break print c, ' ' }
"hello".each_char {|c| if c == 'l' break end print c, ' ' }
"hello".each_char {|c| print c, ' ' }
"hello".each_char {|c| print c, ' ' unless c == 'l' }
"hello".each_char {|c| print c, ' ' }
"hello".each_char {|c| unless c == 'l' print c, ' ' end }
"hello".each_char {|c| unless c == 'l' print c, ' ' }
filter_params[:pattern]
input.nil?
input.nil
input.any?
input = 'abcdef'
a.map {|x| bb.map {|y| x.to_s + y.to_s } }.flatten
a.map {|x| bb.map {|y| x+y } }.flatten
a.map {|x| bb.map {|y| f(x,y) } }.flatten
bb = [3,4]
b
a.length
b = [3,4]
b
a
b = [3,4]
b
a
b = [3,4]
a = [1,2]
filter_params['pattern']
filter_params.pattern
filter_params
params
continue
params
continue
params
